package robLip6.core.tcp;
import java.util.*;
import java.net.*;
import java.io.*;
import java.util.concurrent.locks.*;
/*
 * Classe qui reçoit les données des capteurs de la LOW LEVEL
 */
public class Receiver extends Thread 
{
	private Vector<Integer> m_bufferLowLevel;
	private Vector<Lock> m_mutexes;
	private Socket m_socket;
	
	public Receiver(ServerSocket serv) throws IOException
	{
		this.m_socket = serv.accept();
		this.initialiseBuffer();
		for(Integer i=0 ; i< this.m_bufferLowLevel.size() ; i++)
		{
			Lock l = new ReentrantLock();
			this.m_mutexes.add(l);
		}
	}
	
	public void initialiseBuffer()
	{
	}
	
	public Integer get(Integer i)
	{
		return this.m_bufferLowLevel.elementAt(i);
	}
	
	private void set(Integer i, Integer data)
	{
		m_mutexes.elementAt(i).lock();
		this.m_bufferLowLevel.setElementAt(data, i);
	}
	
	@Override
	public void run() {
		// TODO Auto-generated method stub

	}
}
