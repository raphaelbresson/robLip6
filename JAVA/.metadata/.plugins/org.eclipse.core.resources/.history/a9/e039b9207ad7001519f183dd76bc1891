package robLip6.core.tcp;
import java.util.*;
import java.net.*;
import java.io.*;

/*
 * Classe qui reçoit les données des capteurs de la LOW LEVEL
 */
public class Receiver extends Thread 
{
	private Vector<Capteur> m_capteurs;
	private InputStream m_input;
	private BufferedReader m_in;
	private DataOutputStream m_out;
	private Socket m_client;
	
	public Receiver(ServerSocket serv) throws IOException
	{
		this.m_client = serv.accept();
		this.m_input = this.m_client.getInputStream();
		this.m_in = new BufferedReader(new InputStreamReader(this.m_input));
		this.m_out = new DataOutputStream(this.m_client.getOutputStream());
		this.initialiseCapteurs();
	}
	
	/*
	 * 1) Envoie une reponse TCP et reçoit en retour une requete contenant le nombre de
	 *  capteurs à gérer
	 * 2) Initialise les buffers de ces capteurs via la clesse capteur
	 */
	public void initialiseCapteurs() throws IOException
	{
		Integer nbByteCapt;
		this.m_out.write("ok".getBytes());
		while(this.m_input.available() == 4);
		String nb = this.m_in.readLine();
		Integer nbCapteurs = Integer.parseInt(nb); // on lit le nombre de capteurs à gérer
		for(Integer i=0 ; i < nbCapteurs ; i++)
		{
			this.m_out.write(("C"+i).getBytes());
			while(this.m_input.available() == 4);
			nbByteCapt = Integer.parseInt(this.m_in.readLine()); // on lit
			Capteur capt = new Capteur(nbByteCapt);
			this.m_capteurs.addElement(capt);
		}
	}
	
	public Capteur getCapteur(Integer i)
	{
		return this.m_capteurs.elementAt(i);
	}
	
	@Override
	public void run() {
		// TODO Auto-generated method stub

	}
}
